@mixin clamp(
  $property,
  $min-size,
  $scaler,
  $max-size,
  $min-size-left: false,
  $scaler-left: false,
  $max-size-left: false
) {
  @if $min-size-left == false {
    #{$property}: $max-size;
    #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'};
    #{$property}: clamp($min-size, $scaler, $max-size);
  } @else if $min-size-left == 0 or $min-size-left == auto {
    #{$property}: $max-size $min-size-left;
    #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'} $min-size-left;
    #{$property}: clamp($min-size, $scaler, $max-size) $min-size-left;
  } @else {
    #{$property}: $max-size $min-size-left;
    #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'}
      #{'min(max(#{$min-size-left}, #{$scaler-left}), #{$max-size-left})'};
    #{$property}: clamp($min-size, $scaler, $max-size)
      clamp($min-size-left, $scaler-left, $max-size-left);
  }
}

// Button mixins
@mixin button-variant(
  $background,
  $border,
  $color: color-contrast($background),
  $hover-background:
    if(
      $color == $color-contrast-light,
      shade-color($background, $btn-hover-bg-shade-amount),
      tint-color($background, $btn-hover-bg-tint-amount)
    )
) {
  color: $color;
  background: $background;
  &:hover {
    background-color: $hover-background;
  }
}

@mixin generateResponsiveClasses($class-prefix) {
  @each $breakpoint in map-keys($grid-breakpoints) {

    

    .#{$class-prefix}-{

    }

  
   
    
  }
  
}
