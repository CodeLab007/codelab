name: Deploy to PROD (main)

on:
  push:
    branches: ['main']
  pull_request:
    types: [opened, synchronize]

jobs:
  # test:
  #   name: Test
  #   timeout-minutes: 15
  #   runs-on: ubuntu-latest
  #   # To use Remote Caching, uncomment the next lines and follow the steps below.
  #   env:
  #     TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  #     TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  #     TURBO_REMOTE_ONLY: true
  #     CACHE_KEY: node-deps

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 2

  #     - name: Setup Node.js environment
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         cache: 'yarn'
  #     - name: Cache dependencies
  #       id: cache
  #       uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
  #     - name: Install dependencies
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: yarn

  #     # - name: Build
  #     #   run: yarn build

  #     - name: Test
  #       run: yarn test
   build:
    runs-on: ubuntu-latest
    # Defining job outputs
    outputs:
      # Here we have set this output name as script-file and then using steps object provided by github actions to access a step which has id of publish, the step will have outputs object which will have script-file variable (which we have named down below if it was named something else then we could have acccessed it with that name)
      script-file: ${{ steps.publish.outputs.script-file}}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      
      # One thing to understand is that if we have cached dependencies in any previous job then this job will also use the same cached version because github stores it in place accessible to all jobs even though all jobs run on seperate machines. The cache is even accessible across different workflows
      - name: Cache depenencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
        # This step will product dist folder (artifact)
      - name: Build website
        run: npm run build

      # Here is example
      - name: Publish JS filename
        # id of the step which will allow us to access it above
        id: publish
        # This is a linux command to first find js file in dist/assets folder,echoing the name with scrip-file variable (name of the output) and then storing it in special file created by github actions called $GITHUB_OUT
        # This will store the output variable in THIS step's output object and not for the overall job (thats why we have to add it above in outputs object)
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'

      # Step to upload artificats i.e the files generated by this job as output
      - name: Upload Artifacts
        # using an action provided by github itself for uploading artifacts
        uses: actions/upload-artifact@v3
        # configuration
        with:
          # name of uploaded artifact
          name: dist-files
          # path to upload
          path: ./
          # paths to upload (Use pipe ( | ) symobl for multiple/multiline commands)
          # path: |
          #   dist
          #   package.json

  deploy:      
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
      - name: Build The Project
        run: npm run build
      - name: Copy the build output to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
    +     passphrase: ${{ secrets.DIGITALOCEAN_SSH_PASSPHRASE }}
          port: ${{ secrets.DIGITALOCEAN_PORT }}
          source: "./apps/job-hunt/next"
          target: "test"